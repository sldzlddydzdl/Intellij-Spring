
Decorator pattern

데코레이터 패턴은 기존 뼈대 (클래스)는 유지하되, 이후 필요한 형태로 꾸밀 때 사용한다.
확장이 필요한 경우 상속의 대안으로도 활용 한다. SOLID중에서 개방폐쇄 원칙 (OCP)과
의존 역전 원칙(DIP)를 따른다.

커피 같은경우 기본적으로 에프레소가있고 거기에 물을 첨가하게되면 아이스 아메리카노가 된다.

아이스아메리카노에서 우유를 추가하면 카페라떼가 될수도있다. 

이렇게 원두오 물과 다른것들이 첨가되면 다른커피가 되는것을 Decorator pattern 이라 할수 있다.

빵도 초코를 바르면 초코케이고 딸기들어가면 딸기 케이크 과일이들어가면 과일케이크 처럼

이렇게 원본은 유지하대 무엇을 첨가하냐에 따라 어떻것이 되는거지가 Decorator pattern 이라 할수있다



Observe pattern

관찰자 패턴은 변화가 일어 났을 때, 미리 등록된 다른 클래스에 통보해주는 패턴을 구현한 것이다.
많이 보이는 곳은 event listener에서 해당 패턴을 사용 하고 있다.

안드로이드에 event listener가 있는데 그런게 바로 Observer pattern에 해당한다.
관찰하고있는애가 관찰에 변화가 생기면 미리등록되있는 event를 전달해주는것



Facade pattern

Facade는 건물의 앞쪽 정면 이라는 뜻을 가진다. 여러 개의 객체와 실제 사용하는 서브 객체의 
사이에 복잡한 의존관계가 있을 때 , 중간에 facade 라는 객체를 두고, 여기서 제공하는
interface만을 활용하여 기능을 사용하는 방식이다. Facade 는 자신이 가지고 있는 각
클래스의 기능을 명확히 알아야한다.
( 건물의 뒤쪽에 뭐가잇는지 모르는 형태를 말한다. )
( 여러개의 객체와 실제사용하 서브객체사이의 복잡한 의존관계 있을때 중간에 Facade라는 객체를 두고
 그리고 여기서 제공하는 interface만을이용하여 그기능을 사용한다.)



Strategy pattern

전략 패턴으로 불리며, 객체지향의 꽃이다.
유사한 행위들을 캡슐화하여, 객체의 행위를 바꾸고 싶은 경우 직접 변경하는 것이 아닌
전략만 변경 하여, 유연하게 확장 하는 패턴 SOLID 중에서 개방폐쇄 원칙(OCP)과 
의줜 역전 원칙(DIP)를 따른다.

Strategy pattern 은 아래와 같은 형식이 꼭 필요하다.
전략 메서드를 가진 전략 객체( Normal Strategy, Base64  Strategy)
전략 객체를 사용하는 컨텍스트(Encoder)
전략 객체를 생성해 컨텍스트에 주입하는 클라이언트

 

Web 개론

Web 이란 무엇인가?
(World Wide Web, WWW, W3)은 인터넷에 연결된 컴퓨터를 통해 사람들이 정보를 공유할 수 있는
전 세계적인 정보 공간을 말한다.

Web의 용도는 다양하게 나눌 수 있습니다.

Web Site
google,naver.daum,facebook등 HTML로 구성된 여러 사이트들

API( Application Programming Interface) * Web Service
Kakao Open API, Google Open API, Naver Open API등

User Interface 
Chrome , Safari, Explorer, Smart Watch, IP TV 등

URI

Uniform Resource Identifier

리소스 식별자

특정 사이트
특정 쇼핑 목록
동영상 목록

모든 정보에 접근 할 수 있는 정보


HTTP

Hypertext Transfer Protocol

어플리케이션 컨트롤

GET
POST
PUT
DELETE
OPTIONS
HEAD
TRACE
CONNECT


HTML

Hyper Text Markup Language

하이퍼미디어 포맷

XML을 바탕으로한
범용 문서 포맷

이를 이용하여 
Chrome,
Safari,
Explorer에서

사용자가 알아보기 쉬운 형태로 표현



REST 

백앤드 하는사람이라면 REST API를 잘쓰거나 잘 제공해야한다.

REST( Representation State Transfer : 자원의 상태 전달) - 네트워크 아키텍처

1. Client, Server : 클라이언트와 서버가 서로 독립적으로 분리 되어 있어야 한다.

2. Stateless : 요청에 대해서 클라이언트의 상태를 서버에 저장하지 않는다.

3. Cache : 클라이언트 서버의 응답을 Cache(임시저장) 할 수 있어야 한다.
클라이언트가 Cache를 통해서 응답을 재사용할 수 있어야 하며, 이를 통해서 서버의 부하를 낮춘다.

4. 계층화 ( Layered System ) : 서버와 클라이언트 사이에, 방화벽 ,게이트웨이, Proxy등 다양한
계층 형태로 구성이 가능해야 하며, 이를 확장 할수 있어야한다.

5. 인터페이스 일관성 : 인터페이스의 일관성을 지키고, 아키텍처를 단순화시켜 작은 단위로 분리하여,
클라이언트, 서버가 독립적으로 개선 될 수 있어야한다.

6. Code on Demand( Optional ) : 자바 애플릿, 자바스크립트, 플래시 등 특정한 기능을 서버로 부터
클라이언트가 전달받아 코드를 실행 할 수 있어야 한다.


다음의 인터페이스 일관성이 잘 지켜졌는지에 따라, REST를 잘 사용했는지 판단을 할 수 있다.

1. 자원의 식별

2. 메시지를 통한 리소스 조작

3. 자기 서술적 메시지

4. 어플리케이션 상태에 대한 엔진으로써 하이퍼미디어



 1. 자원의 식별

 웹 기반의 REST 에서는 리소스 접근을 할 때 URI 를 사용 합니다.

 https://foo.co.kr/user/100

 Resource : user

 식별자 : 100

 
 2. 메시지를 통한 리소스 조작

 Web에서는 다양한 방식으로 데이터를 전달 할 수 있습니다.

 그 중에서 가장 많이 사용하는 방식은 HTML, XML. JSON. TEXT등이 있습니다.

 이 중에서 어떠한 타입의 데이터인지를 알려주기 위해서 HTTP Header 부분에
 content-type을 통해서 데이터의 타입을 지정해 줄 수 있습니다.

 또한 리소스 조작을 위해서 데이터 전체를 전달 하지 않고, 이를 메시지로 전달 합니다.

 
 Ex) 서버의 user라는 정보의 전화번호를 처음에는 number라고 결정했고, 이정보를
 Client와 주고 받을 대, 그대로 사용하고 있었다면, 후에 서버의 resource변경으로 phone-number
 로 바뀌게 된다면 Client는 처리를 하지 못 하고 에러가 납니다.

 이러한 부분을 방지 하기 위하여, 별도의 메시지의 형태로 데이터를 주고 받으며, client-server가
 독립적으로 확장 가능하도록 합니다.

 
 3. 자기 서술적 메시지

 요청 하는 데이터가 어떻게 처리 되어야 하는지 충분한 데이터를 포함할 수 있어야한다.

 HTTP 기반의 REST에서는 HTTP Method와 Header 정보, 그리고 URI의 포함되는 정보로
 표현 할 수 있습니다.

 GET : https://foo.co.kr/user/100 ,사용자의 정보 요청
 POST : https://foo.co.kr/user    ,사용자 정보 생성
 PUT :  https://foo.co.kr/user    ,사용자 정보 생성 및 수정
 DELETE : https://foo.co.kr/user/100 , 사용자 정보 삭제

 그 외에 담지 못 한 정보들은 URI의 멧지를 통하여, 표현 한다.

 
 4. Application 상태에 대한 엔진으로써 하이퍼미디어

 REST API를 개발할 때 단순히 Client 요청에 대한 데이터만 응답 해주는 것이 아닌
 관련된 리소스에 대한 Link 정보까지 같이 포함 되어져야 한다.

 이러한 조건들을 잘 갖춘 경우 REST Ful 하다고 표현하고, 이를 REST API라고 부른다.
 4번은 현업에서는 잘 안쓰는 경우가 많다.

 하지만 REST기반으로 하게되면 위의 규약을 꼮 지켜야되는것은아니지만
 그래도 어느정도는 지켜줘야하는 그런 암묵적인 약속이있다.
