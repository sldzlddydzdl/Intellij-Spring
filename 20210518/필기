URI ( Uniform Resource Identifier )

인터넷에서 특정 자원을 나타내는 주소 값 , 해당 값은 유일하다. (응답은 달라 질 수 있다)
요청 : https://www.fastcampus.co.kr/resource/sample/1
응답 : fastcampus.pdf, fastcampus.docx

URL( Uniform Resource Locator ) 

인터넷 상에서의 자원, 특정 파일이 어디에 위치하는지 식별 하는 주소
요청: https://www.fastcampus.co.kr/fastcampus.pdf

URL은 URI 의 하위개념입니다.


URI 설계 원칙 ( RFC-3986 )

- 슬래시 구분자 (/) 는 계층 관계를 나타내는 데 사용한다.
https://fastcampus.co.kr/classes/java/curriculums/web-master

- URI 마지막 문자로 (/) 는 포함하지 않는다.

- 하이픈(-)은 URI 가독성 을 높이는데 사용한다

- 밑줄(_)은 사용하지 않는다.

- URI 경로에는 소문자가 적합하다.

- 파일 확장자는 URI에 포함하지 않는다.

- 프로그래밍 언어에 의존적인 확장자를 사용하지 않는다.

- 구현에 의존적인 경로를 사용하지 않는다.

- 세션 ID를 포함하지 않는다. EX) 누군가가 로그인한 화면을 session-id=abcdef 로 하게되서
 들어가게되면 노출이되서 다른 사용자가 들어가게 되는 일이발생되어 포함하지 않는다.

- 프로그래밍 언어의 Method 명을 이용하지 않는다.

- 명사에 단수형 보다는 복수형을 사용해야한다. 컬렉션에 대한 표현은 복수로 사용

- 컨트롤러 이름으로 동사나 동사구를 사용한다.

- 경로 부분 중 변하는 부분은 유일한 값으로 대체 한다.
생략.../curriculums/web-master/lesson/2/user/100

- CRUD 기능을 나타내는 것은 URI에 사용하지 않는다.
GET : 생략.../curriculums/web-master/lessons/2/users/100/READ(X)
DELETE : 생략.../curriculums/web-master/lessons/2/user/100 (O)

- URI Query Parameter 디자인
URI 쿼리 부분으로 컬렉션 결과에 대해서 필터링 할 수 있다.
생략.../curriculums/web-master?chapter=2

- URI 쿼리는 컬렉션의 결과를 페이지로 구분하여 나타내는데 사용한다.
생략.../curriculums/web-master?chapter=2&page=0&size=10&sort=asc

- API에 있어서 서브 도메인은 일관성 있게 사용해야 한다.
https://fastcampus.co.kr
https://api.fastcampus.co.kr
https://api-fastcampus.co.kr

- 클라이언트 개발자 포탈 서브 도메인은 일관성 있게 만든다.
https://dev-fastcampus.co.kr
https://developer-fastcampus.co.kr


HTTP Protocol 

- HTTP(Hyper Text Transfer Protocol ) 로 RFC 2616에서 규정된 Web에서 데이터를 주고 받는 프로토콜

- 이름에는 하이퍼텍스트 전송용 프로토콜로 정의되어 있지만 실제로는 HTML, XML, JSON, Image, Voice,
Vide, JavaScript, PDF 등 다양한 컴퓨터에서 다룰 수 있는 것은 모두 전송 할 수 있습니다.

- HTTP는 TCP를 기반으로 한 REST의 특징을 모두 구현하고 있는 Web기반의 프로토콜 


	HTTP는 메시지를 주고( Request ) 받는 ( Response ) 형태의 통신 방법 입니다.

	Client				Server

	요청 메시지 작성		

	요청 메시지 전송		

	응답 대기 			

					요청 대기

					요청 메시지 수신

					요청 메시지 해석
					
					애플리케이션 할당

					애플리케이션 결과 생성

					응답 메시지 송신

	응답 메시지 수신

	응답 메시지 해석

	데이터 표시 및 처리		

	의미			CRUD	멱등성	  안전성    Path Variable    QueryParameter    DataBody

GET     리소스 취득		R	  O	    O            O                 O                 X

POST	리소스 생성,추가	C	  X         X            O                 △		     O

PUT	리소스 갱신,생성	C/U	  O         X            O                 △                O   

DELETE	리소스 삭제		D	  O         X            O                 O                 X

HEAD	헤더 데이터취득		-         O         O            -                  -                -

OPTIONS	지원하는 메소드 취득	-         O         -            -                  -                -

TRACE	요성메시지 반환		-         O         -            -                  -                -

CONNECT 프록시 동작 터널 접속	-         X         -            -                  -                -
	으로 변경


멱등성 내가 몇번씩 요청을 하더라도 같은 응답이 내려오는것을 멱등성이라한다.


HTTP Status Code

응답의 상태를 나타내는 코드

	의미		내용
1XX	처리중		처리가 계속 되고 있는 상태. 클라이언트는 요청을 계속하거나 서버의 지시에 따라서 재요청
2XX	성공		요청의 성공
3XX	리다이렉트 	다른 리소스로 리다이렉트, 해당 코드를 받았을 때는 Response의 새로운 주소로 다시 요청
	( 너가 새로운 주소로 오면되 ) 
4XX	클라이언트 에러 클라이언트의 요청에 에러가 있는 상태. 재선송 하여도 에러가 해결되지 않는다.
	( 개발자가 어디서 실수 햇는지 찾아야한다 )
5XX	서버에러 	서버 처리중 에러가 발생한 상태. 재 전송시 에러가 해결 되었을 수도 있다.
	( 서버가 다운됫다거나, 서버의 DB상태가 안좋거나, 서버에누가 실수했을때 나타난다. )


200	성공
201	성공,리소스를 생성 성공
301	리다이렉트, 리소스가 다른 장소로 변경됨을 알림
303	리다이렉트, Client에서 자동으로 새로운 리소스로 요청 처리
400	요청 오류, 파라미터 에러
401	권한 없음( 인증 실패 )
404	리소스 없음 ( 페이지를 찾을 수 없음 ) -> 잘못된 URI로 들어갔을때
500	서버 내부 에러( 서버 동작 처리 에러 )
503	서비스 정지 ( 점검 등등 )


----- Spring Boot 시작하기

Spring Boot 는 단순히 실행되며, 프로덕션 제품 수준의 스프링 기반 어플리케이션을 쉽게 만들 수 있다.

Spring Boot 어플리케이션에는 Spring 구성이 거의 필요 하지 않다.

Spring Boot java-jar로 실행하는 java어플리케이션을 만들 수 있다.

톰캣도 내장되어있어서 따로 설치할 필요가 없다.

주요 목표

Spring 개발에 대해 빠르고, 광범위하게 적용할 수 있는 환경

기본값 설정이 있지만 설정을 바꿀 수 있다.

대규모 프로젝트에 공통적인 비 기능 제공 ( 보안. 모니터링 등등 )

XML 구성 요구사항이 전혀 없음

( Annotation 으로 설정을 해줄수 있다 )


Build Tool

Name	version
Maven	3.3+
Gradle	4.x(4.4 and later ) and 5.x


Servlet Containers

Name		servlet version
Tomcat 9.x	3.3
Jetty 9.4	3.1
Undertow 2.0	4.0
Netty		-


https://start.spring.io

어플리케이션 개발에 필수 요소들만 모아두었다.

간단한 설정으로 개발 및 커스텀이 가능하다.

간단하고, 빠르게 어플리케이션 실행 및 배포가 가능하다.

대규모프로젝트(운영환경)에 필요한 비 기능적 기능도 제공한다.

오랜 경험에서 나오는 안정적인 운영이 가능하다.

Spring 에서 불편한 설정이 없어졌다. ( XML 설정 등등 )
